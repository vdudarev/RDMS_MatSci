@model SampleFull
@using InfProject.DBContext;
@using WebUtilsLib;
@using Microsoft.AspNetCore.Mvc.ViewEngines;
@inject DataContext dataContext
@{
    // IMPORTANT: All substrates should be in a rubric with RubricNameUrl == "substrates"
    RubricInfo substrates = await dataContext.GetRubricByUrl("service_substrates");
    if (substrates == null) { 
        throw new Exception("Rubric is not found by URL \"service_substrates\". Please make sure to name the rubric correctly");
    }
    if (!Context.User.IsInRole(UserGroups.PowerUser) && !Context.User.IsInRole(UserGroups.Administrator)) { 
        throw new UnauthorizedAccessException("User is not PowerUser or Administrator");
    }

    // model (ObjectInfo obj, TypeInfo dbType, ControllerContext controllerContext, ICompositeViewEngine viewEngine)
    ObjectInfo obj = Model;

    //(ObjectInfo obj, TypeInfo dbType, ControllerContext controllerContext, ICompositeViewEngine viewEngine) = Model;
    TypeInfo dbType = await dataContext.GetType(obj.TypeId);
    ControllerContext controllerContext = ViewBag.controllerContext;
    ICompositeViewEngine viewEngine = ViewBag.viewEngine;
    var types = (await dataContext.GetTypes()).Where(x => !x.IsHierarchical).ToList();
    var jsontypes = Newtonsoft.Json.JsonConvert.SerializeObject(types);
    int? typeIdForRubric = dbType.TypeIdForRubric;
    int.TryParse(string.Compare(Context.Request.Method, "POST") == 0 ? Context.Request.Form["idr"] : Context.Request.Query["idr"], out int idr);
    string returl = string.Compare(Context.Request.Method, "POST") == 0 ? Context.Request.Form["returl"] : Context.Request.Query["returl"];
    int countProperties = await dataContext.Property_GetAllPropertiesCount(obj.ObjectId);
    RubricInfo rubric = await dataContext.GetRubricById(obj.RubricId ?? idr);

    List<RubricInfo> listRubrics = new List<RubricInfo>();
    if (typeIdForRubric.HasValue && typeIdForRubric.Value != 0)
    {
        listRubrics = await dataContext.GetList_RubricTree_AccessControl(typeIdForRubric.Value, Context.GetAccessControlFilter());
    }



    UserContext userCtx = UserUtils.GetUserContext(Context);
    AccessControlFilter accessControlFilter = new AccessControlFilter(userCtx.access, userCtx.userId);
    List<ObjectInfo> listSubstrates = await dataContext.ObjectInfo_GetByRubricId(substrates.RubricId, accessControlFilter);
    listSubstrates = listSubstrates.Where(x => x.TypeId == 5).ToList();  // substrate


    if (obj.ObjectId != 0)
    {
        ViewData["Title"] = $"Editing sample {obj.ObjectName}";
    }
    else { 
        ViewData["Title"] = $"Creating a new sample";
    }

    (RubricInfo rubric, ObjectInfo obj) breadCrumbs = (rubric, null);
/// https://github.com/sinanbozkus/FormHelper
}
<partial name="RubricBreadCrumbs" model=@breadCrumbs />

<partial name="pDataModel" model="false" />

<!-- Modal https://getbootstrap.com/docs/5.0/components/modal/ - Select elements -->
<div class="modal fade" id="myModalMendeleev" tabindex="-1" aria-labelledby="myModalMendeleevLabel" aria-hidden="true">
    <div class="modal-dialog" style="min-width:800px;">
        <form method="post" asp-controller="AdminTree" asp-action="UpdateInsert">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="myModalMendeleevLabel">Select elements</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <partial name="pMendeleevWide" model="false" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <!--button type="submit" class="btn btn-primary" title="Save"><i class="bi bi-save2-fill"></i> Save</button></td-->
                </div>
            </div>
        </form>
    </div>
</div>


<h1 class="display-4">@Html.Raw(ViewData["Title"])</h1>
<form asp-formhelper="true" asp-action="UpdateSample" asp-controller="Custom" method="post" enctype="multipart/form-data" id="editForm" onsubmit="return sumbitSample();">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" id="returl" name="returl" value="@returl" />
    <input type="hidden" id="ObjectId" name="ObjectId" value="@obj.ObjectId" />
    <input type="hidden" id="TenantId" name="TenantId" value="@obj.TenantId" />
    <input type="hidden" id="ExternalId" name="ExternalId" value="@obj.ExternalId" />
    <input type="hidden" id="IsPublished" name="ispublished" value="true" />
    <input type="hidden" id="ObjectFilePath" name="objectfilepath" value="@obj.ObjectFilePath" />
    <table class="table" id="values">
        <tbody>
            <tr id="trType" class="d-none"><th>Type</th><td>
                    <select class="form-select" asp-for="TypeId">
                        <option value="">=- select the type -=</option>
                        @for (int i = 0; i < types.Count; i++)
                        {
                            <option value="@types[i].TypeId">@types[i].TypeName</option>
                        }
                    </select>
            </td></tr>
            <tr id="trSubstrate">
                <th><span class="required">Substrate</span></th>
                <td>
                    <select class="form-select" asp-for="SubstrateObjectId">
                        <option value="0">=- select the substrate -=</option>
                        @for (int i = 0; i < listSubstrates.Count; i++)
                        {
                            <option value="@listSubstrates[i].ObjectId">@listSubstrates[i].ObjectName</option>
                        }
                    </select>
                </td>
            </tr>
            <tr id="trType">
                <th><span class="required">Type</span></th>
                <td>
@*                     Please, make it consistent with SampleFull.SampleType *@
                    <select class="form-select" asp-for="Type">
                        <option value="0">unknown</option>
                        <option value="1">Materials Library (342-grid)</option>
                        <option value="2">Stripe</option>
                        <option value="3">No Gradient</option>
                        <option value="4">Stress Chip</option>
                        <option value="5">Piece</option>
                    </select>
                </td>
            </tr>
            <tr id="trType">
                <th><span class="required"><label asp-for="WaferId" class="control-label"></label></span></th>
                <td>
                    <input type="number" class="form-control" asp-for="WaferId" placeholder="Unique wafer ID as engraved by the wafer manufacturer (0 - old unmarked wafers)" />
                </td>
            </tr>
            <tr id="trObjectName">
                <th><span class="required"><label asp-for="ObjectName" class="control-label"></label></span></th>
                <td>
                    <input asp-for="ObjectName" class="form-control" placeholder='will be prefixed with "<id>"' />
                    <span asp-validation-for="ObjectName" class="text-danger"></span>
                    <!--input type="text" class="form-control" id="ObjectName" name="objectname" value="@obj.ObjectName" /-->
                </td>
            </tr>
            <tr id="trObjectNameUrl" class="d-none">
                <th><label asp-for="ObjectNameUrl" class="control-label"></label></th>
                <td>
                    <input asp-for="ObjectNameUrl" class="form-control" placeholder="Input unique URL part" />
                    <span asp-validation-for="ObjectNameUrl" class="text-danger"></span>
                </td>
            </tr>
            <tr id="trObjectFilePath" class="d-none">
                <th><label asp-for="ObjectFilePath" class="control-label"></label></th>
                <td>
                    @if (!string.IsNullOrEmpty(obj.ObjectFilePath))
                    {
                        <span id="@("objValidator" + obj.ObjectId)" class="title validator d-none"><i class="bi bi-hourglass-split"></i></span>
                        <a href="javascript:void(0);" title="Data to upload" id="@("objData" + obj.ObjectId)" class="objData d-none" onclick="ShowDatabaseDataForObject(@obj.ObjectId)"><i class="bi bi-database-add bi-bag-check"></i></a>
                        <span id="@("objReload" + obj.ObjectId)" class="title reload d-none"><i class="bi bi-hourglass-split"></i></span>

                        <a href="/file/download/@obj.ObjectId">@obj.ObjectFile</a>
                        <input type="checkbox" name="deletefile" id="deletefile" value="1" /> @Html.Raw("remove file")
                        <sup class="text-muted">@obj.ObjectFileHash</sup>
                        <div>
                            <a id="validation" href="javascript:void(0);" class="btn btn-outline-primary me-2" onclick="ValidateFileType(@obj.ObjectId)"><i class="bi bi-check2-all"></i> validate</a>
                            <a id="reload" href="javascript:void(0);" class="btn btn-outline-primary me-2" onclick="(async function() { $('#reloadWaiter').removeClass('d-none'); await ReloadFileType(@obj.ObjectId); $('#reloadWaiter').addClass('d-none'); })()"><i class="bi bi-database-up"></i> reload</a>
                            <div id="reloadWaiter" class="spinner-border text-primary ms-2 d-none" role="status">
                                <span class="visually-hidden">processing...</span>
                            </div>
                            @if (countProperties > 0)
                            {
                                <a id="deleteProps" href="javascript:void(0);" class="btn btn-outline-danger me-2" onclick="(async function() { $('#deletePropsWaiter').removeClass('d-none'); await DeleteProperties(@obj.ObjectId); $('#deletePropsWaiter').addClass('d-none'); window.location.reload(); })()"><i class="bi bi-x-lg"></i> delete @countProperties properties</a>
                                <div id="deletePropsWaiter" class="spinner-border text-primary ms-2 d-none" role="status">
                                    <span class="visually-hidden">processing...</span>
                                </div>
                            }
                            @if (Context.User.IsInRole(UserGroups.Administrator))  // admin only
                            {
                                int linkedObjects = await dataContext.ObjectLinkObject_GetLinkedObjectsCount(obj.ObjectId);
                                if (linkedObjects > 0)
                                {
                                    <a id="deleteAssoc" href="javascript:void(0);" class="btn btn-outline-danger me-2" onclick="(async function() { $('#deleteAssocWaiter').removeClass('d-none'); await DeleteAssocObjects(@obj.ObjectId); $('#deleteAssocWaiter').addClass('d-none'); window.location.reload(); })()"><i class="bi bi-x-lg"></i> delete @linkedObjects associated objects</a>
                                    <div id="deleteAssocWaiter" class="spinner-border text-primary ms-2 d-none" role="status">
                                        <span class="visually-hidden">processing...</span>
                                    </div>
                                }
                            }
                        </div>
                        @Html.Raw("Upload replacement:")
                    }

                    <input class="form-control" type="file" id="fileupload" name="fileupload">
                    <span asp-validation-for="ObjectFilePath" class="text-danger"></span>
                </td>
            </tr>
            <tr id="trObjectDescription">
                <th><label asp-for="ObjectDescription" class="control-label"></label></th>
                <td>
                    <textarea asp-for="ObjectDescription" class="form-control"></textarea>
                    <span asp-validation-for="ObjectDescription" class="text-danger"></span>
                </td>
            </tr>

            <partial name="_ObjectSample" model=@obj />

            @if (obj.ObjectId != 0)
            {
                <tr id="trObjectId"><th><label asp-for="ObjectId" class="control-label"></label>
                        <a href="@("/rubric/" + listRubrics.First(x => x.RubricId==obj.RubricId).RubricNameUrl + "/#o" + obj.ObjectId)"><i class="bi bi-arrow-right"></i></a>
                    </th>
                    <td>@obj.ObjectId <span style="float:right; @(obj.ExternalId.HasValue ? "display:block; " : "display:none;")">SampleID: <b>@obj.ExternalId</b></span></td>
                </tr>
                <tr id="tr_created"><th><label asp-for="_created" class="control-label"></label></th><td>@obj._created</td></tr>
            }
            @if (obj._createdBy is not null && obj.ObjectId != 0)
            {
                <tr id="tr_createdBy"><th><label asp-for="_createdBy" class="control-label"></label></th><td>@dataContext.GetUser((int)obj._createdBy).Result</td></tr>
            }
            @if (obj._created != obj._updated)
            {
                <tr id="tr_updated"><th><label asp-for="_updated" class="control-label"></label></th><td>@obj._updated</td></tr>
                <tr id="tr_updatedBy"><th><label asp-for="_updatedBy" class="control-label"></label></th><td>@dataContext.GetUser((int)obj._updatedBy!).Result</td></tr>
            }
            <tr id="trRubricId" class="d-none">
                <td><label asp-for="RubricId" class="control-label"></label>
                    @if (@obj.RubricId != 0)
                    {
                        <a href="@("/rubric/" + listRubrics.First(x => x.RubricId==obj.RubricId).RubricNameUrl)/"><i class="bi bi-arrow-right"></i></a>
                    }
                </td>
                <td>
                    @if (listRubrics.Count==0)
                    {
                        <input asp-for="RubricId" type="number" class="form-control" placeholder="Input integer for RubricId">
                    }
                    else
                    {
                        <select class="form-select" asp-for="RubricId">
                            <option value="">=- select the section -=</option>
                            @for (int i = 0; i < listRubrics.Count; i++)
                            {
                                <option value="@listRubrics[i].RubricId">@(new string('_', listRubrics[i].Level) + listRubrics[i].RubricName)</option>
                            }
                        </select>
                    }
                </td>
            </tr>
            <tr id="trSortCode" class="d-none">
                <td><label asp-for="SortCode" class="control-label"></label></td>
                <td>
                    <input asp-for="SortCode" type="number" class="form-control" placeholder="Input integer for sort">
                </td>
            </tr>
            <tr id="trAccessControl">
                <th><span class="required"><label asp-for="AccessControl" class="control-label"></label></span></th>
                <td>
                    <select class="form-select" asp-for="AccessControl">
                        <option value="0">public</option>
                        <option value="1">protected</option>
                        <option value="2">protectedNDA</option>
                        <option value="3">private</option>
                    </select>
                </td>
            </tr>

            <tr id="trButtons">
                <th><a href="@(string.IsNullOrEmpty(returl) ? Url.Action("List", "AdminObject", new { id = obj.TypeId }) : "javascript:window.history.back();")" class="btn btn-secondary"><i class="bi bi-list-task"></i> @(string.IsNullOrEmpty(returl) ? "Back to the List" : "Close and back to the Site")</a></th>
                <td><button id="btnSave" type="submit" class="btn btn-primary" title="Save"><i class="bi bi-save2-fill"></i> Save</button></td>
            </tr>
        </tbody>
    </table>
</form>
@if (obj.ObjectId != 0)
{
@*    <partial name="_ObjectLinkObject" model=@obj /> *@
@*     <partial name="_PropertyAll" model=@obj /> *@

    <partial name="pSampleAddProcessingStep" model=@obj.ObjectId />
    <div class="mt-4">
        <partial name="pSampleSplitIntoPieces" model=@obj.ObjectId />
    </div>
}

@section Scripts {
    <script src="https://unpkg.com/sortablejs-make/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-sortablejs@latest/jquery-sortable.js"></script>
    <script type="text/javascript" src="~/js/EditItem.js"></script>
    <script type="text/javascript">app.objectId = @obj.ObjectId;</script>
    <script type="text/javascript">app.types = @Html.Raw(jsontypes);</script>
    <script type="text/javascript">
        function sumbitSample() {
            if ($("#SubstrateObjectId").val() == "0") { 
                SpawnError("Select <u>Substrate</u>, please...");
                SetFocus("SubstrateObjectId");
                return false;
            }
            // Type is always selected (at least something)
            if ($("#ObjectName").val() == "") {
                SpawnError("Specify <u>Name</u>, please...");
                SetFocus("ObjectName");
                return false;
            }
            if ($("#Elements").val() == "") {
                SpawnError("Specify <u>Chemical System</u>, please...");
                SetFocus("Elements");
                return false;
            }
            DisableButton("btnSave");
            return true;
        }
    </script>
    @if (idr != 0) {
        <script type="text/javascript">
            $(document).ready(function () {
                $("#RubricId").val("@idr");
            });
        </script>
    }
}
