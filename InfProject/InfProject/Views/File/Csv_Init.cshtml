@using InfProject.Models;
@model (System.Data.DataTable, int, string)
@inject InfProject.DBContext.DataContext dataContext
@{
	(System.Data.DataTable dt, int objectId, string delimiter) = Model;
    ObjectInfo obj = await dataContext.ObjectInfo_Get(objectId);
	TableView tv = new TableView(dt) { EmptyMessage = "No records", Title = $"CSV Viewer: {obj.ObjectName}" };
	ViewData["Title"] = tv.Title;
}
<partial name="pShowTable" model=@tv />
<hr>
<div class="row">
    <div class="col-9">
        <div>
            <canvas id="myChart"></canvas>
        </div>
        <div id="buttons">
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/d3.v6.min.js" charset="utf-8"></script>
    <link href="~/css/datatables.min.css" rel="stylesheet" type="text/css" />
    <script src="~/js/datatables.min.js" type="text/javascript"></script>
    <script src="https://unpkg.com/sortablejs-make/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-sortablejs@latest/jquery-sortable.js"></script>
    <script type="text/javascript">
        var csvUrl = "/file/download/@obj.ObjectId";
        var sourceData = null;
        var myChart = null;


		function Sort(data, field) {
			data.sort(function (x, y) {
				return d3.ascending(parseFloat(x[field]), parseFloat(y[field]));
			})
			Draw(data);
		}

		function CreateButtons(data) {
			var k, st = "";
			for (k = 1; k < data.columns.length; k++) {
				st += '<button type="button" class="btn btn-primary mr-2" style="margin-right:10px" data-id="' + data.columns[k] + '">Sort by ' + data.columns[k] + '</button>';
			}
			document.getElementById("buttons").innerHTML = st;

			$("#buttons [data-id]").click(function () {
				var id = $(this).attr("data-id");
				console.log("Sort by " + id + " clicked");
				Sort(sourceData, id);
			});
		}


		function Draw(data) {
			for (k = 1; k < data.columns.length; k++) {
				var d = [];
				for (i = 0; i < data.length; i++) {
					d.push(data[i][data.columns[k]]);
				}
				myChart.config.data.datasets[k-1].data = d;
			}
			myChart.update();
			// console.log("allData");
			// console.log(allData);
			// console.log("data");
			// console.log(data);

		}

		d3.dsv('@delimiter', csvUrl).then(function (data) {
			//console.log("data");
			//console.log(data);
			//for (i = 0; i < data.length; i++){
			//	data[i].i = i;
			//}
			console.log("data");
			console.log(data);
			sourceData = data;
			CreateButtons(data);


			// var chartLabels = d3.range(1, data.length);
			var chartLabels = [];
			for (i = 0; i < data.length; i++) {
				chartLabels.push(data[i][data.columns[0]]);
			}
			// console.log("labels");
			// console.log(labels);

			// data.columns == ['Al', 'Co', 'Ni']
			// console.log("data.columns");
			// console.log(data.columns);

			var config = {
				type: 'line',
				data: {
					labels: chartLabels,
					datasets: []
				},
				options: {
					responsive: true
				}
			};


			for (k = 1; k < data.columns.length; k++) {
				var i, d = [];
				for (i = 0; i < data.length; i++) {
					d.push({ x: data[i][data.columns[0]], y: data[i][data.columns[k]] });
				}

				config.data.datasets.push({
					label: data.columns[k],
					//backgroundColor: 'rgb(255, 99, 132)',
					//borderColor: 'rgb(255, 99, 132)',
					data: d,
					tension: 0.1
				})
			}

			myChart = new Chart(
				document.getElementById('myChart'),
				config
			);

			Draw(data);

		});




        $(document).ready(function () {
            initDataTable();
        });
    </script>
}

